#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('reseauferroviaire:server');
var http = require('http');
var jsdom = require('jsdom');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);
var cronJob = require("cron").CronJob;

railRoadState = app.get('railRoadState'); // Check Business Objects initialization
scannerCollection = app.get('scannerCollection');
trafficlightCollection = app.get('trafficlightCollection');

io.sockets.on('connection', function (socket) {
    console.log('Client connected');
    socket.emit('message', 'Connected to ' + server.address().address + ':' + server.address().port);
    // TODO Serial Datasources (Requests/responses to/from Arduino modules), implement arduino.js file in models directory

    new cronJob("*/2 * * * * *", function() {
        if (railRoadState === true) {
            // Scanner Emit Message Simulator...
            var randomId = Math.floor((Math.random() * scannerCollection.getSize()) + 1);
            for (var indexId = 1; indexId <= scannerCollection.getSize(); indexId++) {
                var id = 'SC' + indexId;
                if (randomId === indexId) {
                    socket.emit('message', scannerCollection.getObjectById(id).buildGreenEmitMessage());
                }
                else {
                    socket.emit('message', scannerCollection.getObjectById(id).buildOffEmitMessage());
                }
            }
            // Trafficlight Emit Message Simulator...
            randomId = Math.floor((Math.random() * trafficlightCollection.getSize()) + 1);
            id = 'TR' + randomId;
            var randomColor = Math.floor((Math.random() * 3) + 1);
            switch(randomColor) {
                case 1:
                    socket.emit('message', trafficlightCollection.getObjectById(id).buildOffEmitMessage());
                    break;
                case 2:
                    socket.emit('message', trafficlightCollection.getObjectById(id).buildGreenEmitMessage());
                    break;
                case 3:
                    socket.emit('message', trafficlightCollection.getObjectById(id).buildRedEmitMessage());
                    break;
            }
        }
    }, null, true);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}